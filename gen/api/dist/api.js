/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var querystring = require("querystring");
var url = require("url");
var isomorphicFetch = require("isomorphic-fetch");
var assign = require("core-js/library/fn/object/assign");
var BASE_PATH = "http://petstore.swagger.io/v2".replace(/\/+$/, "");
var BaseAPI = (function () {
    function BaseAPI(fetch, basePath) {
        if (fetch === void 0) { fetch = isomorphicFetch; }
        if (basePath === void 0) { basePath = BASE_PATH; }
        this.basePath = basePath;
        this.fetch = fetch;
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 * PetApi - fetch parameter creator
 */
exports.PetApiFetchParamCreator = {
    /**
     *
     * @summary Add a new pet to the store
     * @param body Pet object that needs to be added to the store
     */
    addPet: function (params, options) {
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling addPet");
        }
        var baseUrl = "/pet";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Deletes a pet
     * @param petId Pet id to delete
     * @param apiKey
     */
    deletePet: function (params, options) {
        // verify required parameter "petId" is set
        if (params["petId"] == null) {
            throw new Error("Missing required parameter petId when calling deletePet");
        }
        var baseUrl = "/pet/{petId}"
            .replace("{" + "petId" + "}", "" + params["petId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "api_key": params["apiKey"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Multiple status values can be provided with comma separated strings
     * @summary Finds Pets by status
     * @param status Status values that need to be considered for filter
     */
    findPetsByStatus: function (params, options) {
        // verify required parameter "status" is set
        if (params["status"] == null) {
            throw new Error("Missing required parameter status when calling findPetsByStatus");
        }
        var baseUrl = "/pet/findByStatus";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "status": params["status"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @summary Finds Pets by tags
     * @param tags Tags to filter by
     */
    findPetsByTags: function (params, options) {
        // verify required parameter "tags" is set
        if (params["tags"] == null) {
            throw new Error("Missing required parameter tags when calling findPetsByTags");
        }
        var baseUrl = "/pet/findByTags";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "tags": params["tags"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Returns a single pet
     * @summary Find pet by ID
     * @param petId ID of pet to return
     */
    getPetById: function (params, options) {
        // verify required parameter "petId" is set
        if (params["petId"] == null) {
            throw new Error("Missing required parameter petId when calling getPetById");
        }
        var baseUrl = "/pet/{petId}"
            .replace("{" + "petId" + "}", "" + params["petId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Update an existing pet
     * @param body Pet object that needs to be added to the store
     */
    updatePet: function (params, options) {
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling updatePet");
        }
        var baseUrl = "/pet";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Updates a pet in the store with form data
     * @param petId ID of pet that needs to be updated
     * @param name Updated name of the pet
     * @param status Updated status of the pet
     */
    updatePetWithForm: function (params, options) {
        // verify required parameter "petId" is set
        if (params["petId"] == null) {
            throw new Error("Missing required parameter petId when calling updatePetWithForm");
        }
        var baseUrl = "/pet/{petId}"
            .replace("{" + "petId" + "}", "" + params["petId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "name": params["name"],
            "status": params["status"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary uploads an image
     * @param petId ID of pet to update
     * @param additionalMetadata Additional data to pass to server
     * @param file file to upload
     */
    uploadFile: function (params, options) {
        // verify required parameter "petId" is set
        if (params["petId"] == null) {
            throw new Error("Missing required parameter petId when calling uploadFile");
        }
        var baseUrl = "/pet/{petId}/uploadImage"
            .replace("{" + "petId" + "}", "" + params["petId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "additionalMetadata": params["additionalMetadata"],
            "file": params["file"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * PetApi - functional programming interface
 */
exports.PetApiFp = {
    /**
     *
     * @summary Add a new pet to the store
     * @param body Pet object that needs to be added to the store
     */
    addPet: function (params, options) {
        var fetchArgs = exports.PetApiFetchParamCreator.addPet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Deletes a pet
     * @param petId Pet id to delete
     * @param apiKey
     */
    deletePet: function (params, options) {
        var fetchArgs = exports.PetApiFetchParamCreator.deletePet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Multiple status values can be provided with comma separated strings
     * @summary Finds Pets by status
     * @param status Status values that need to be considered for filter
     */
    findPetsByStatus: function (params, options) {
        var fetchArgs = exports.PetApiFetchParamCreator.findPetsByStatus(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @summary Finds Pets by tags
     * @param tags Tags to filter by
     */
    findPetsByTags: function (params, options) {
        var fetchArgs = exports.PetApiFetchParamCreator.findPetsByTags(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Returns a single pet
     * @summary Find pet by ID
     * @param petId ID of pet to return
     */
    getPetById: function (params, options) {
        var fetchArgs = exports.PetApiFetchParamCreator.getPetById(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Update an existing pet
     * @param body Pet object that needs to be added to the store
     */
    updatePet: function (params, options) {
        var fetchArgs = exports.PetApiFetchParamCreator.updatePet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Updates a pet in the store with form data
     * @param petId ID of pet that needs to be updated
     * @param name Updated name of the pet
     * @param status Updated status of the pet
     */
    updatePetWithForm: function (params, options) {
        var fetchArgs = exports.PetApiFetchParamCreator.updatePetWithForm(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary uploads an image
     * @param petId ID of pet to update
     * @param additionalMetadata Additional data to pass to server
     * @param file file to upload
     */
    uploadFile: function (params, options) {
        var fetchArgs = exports.PetApiFetchParamCreator.uploadFile(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * PetApi - object-oriented interface
 */
var PetApi = (function (_super) {
    __extends(PetApi, _super);
    function PetApi() {
        _super.apply(this, arguments);
    }
    /**
     *
     * @summary Add a new pet to the store
     * @param body Pet object that needs to be added to the store
     */
    PetApi.prototype.addPet = function (params, options) {
        return exports.PetApiFp.addPet(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Deletes a pet
     * @param petId Pet id to delete
     * @param apiKey
     */
    PetApi.prototype.deletePet = function (params, options) {
        return exports.PetApiFp.deletePet(params, options)(this.fetch, this.basePath);
    };
    /**
     * Multiple status values can be provided with comma separated strings
     * @summary Finds Pets by status
     * @param status Status values that need to be considered for filter
     */
    PetApi.prototype.findPetsByStatus = function (params, options) {
        return exports.PetApiFp.findPetsByStatus(params, options)(this.fetch, this.basePath);
    };
    /**
     * Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @summary Finds Pets by tags
     * @param tags Tags to filter by
     */
    PetApi.prototype.findPetsByTags = function (params, options) {
        return exports.PetApiFp.findPetsByTags(params, options)(this.fetch, this.basePath);
    };
    /**
     * Returns a single pet
     * @summary Find pet by ID
     * @param petId ID of pet to return
     */
    PetApi.prototype.getPetById = function (params, options) {
        return exports.PetApiFp.getPetById(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update an existing pet
     * @param body Pet object that needs to be added to the store
     */
    PetApi.prototype.updatePet = function (params, options) {
        return exports.PetApiFp.updatePet(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Updates a pet in the store with form data
     * @param petId ID of pet that needs to be updated
     * @param name Updated name of the pet
     * @param status Updated status of the pet
     */
    PetApi.prototype.updatePetWithForm = function (params, options) {
        return exports.PetApiFp.updatePetWithForm(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary uploads an image
     * @param petId ID of pet to update
     * @param additionalMetadata Additional data to pass to server
     * @param file file to upload
     */
    PetApi.prototype.uploadFile = function (params, options) {
        return exports.PetApiFp.uploadFile(params, options)(this.fetch, this.basePath);
    };
    return PetApi;
}(BaseAPI));
exports.PetApi = PetApi;
;
/**
 * PetApi - factory interface
 */
exports.PetApiFactory = function (fetch, basePath) {
    return {
        /**
         *
         * @summary Add a new pet to the store
         * @param body Pet object that needs to be added to the store
         */
        addPet: function (params, options) {
            return exports.PetApiFp.addPet(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Deletes a pet
         * @param petId Pet id to delete
         * @param apiKey
         */
        deletePet: function (params, options) {
            return exports.PetApiFp.deletePet(params, options)(fetch, basePath);
        },
        /**
         * Multiple status values can be provided with comma separated strings
         * @summary Finds Pets by status
         * @param status Status values that need to be considered for filter
         */
        findPetsByStatus: function (params, options) {
            return exports.PetApiFp.findPetsByStatus(params, options)(fetch, basePath);
        },
        /**
         * Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
         * @summary Finds Pets by tags
         * @param tags Tags to filter by
         */
        findPetsByTags: function (params, options) {
            return exports.PetApiFp.findPetsByTags(params, options)(fetch, basePath);
        },
        /**
         * Returns a single pet
         * @summary Find pet by ID
         * @param petId ID of pet to return
         */
        getPetById: function (params, options) {
            return exports.PetApiFp.getPetById(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update an existing pet
         * @param body Pet object that needs to be added to the store
         */
        updatePet: function (params, options) {
            return exports.PetApiFp.updatePet(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Updates a pet in the store with form data
         * @param petId ID of pet that needs to be updated
         * @param name Updated name of the pet
         * @param status Updated status of the pet
         */
        updatePetWithForm: function (params, options) {
            return exports.PetApiFp.updatePetWithForm(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary uploads an image
         * @param petId ID of pet to update
         * @param additionalMetadata Additional data to pass to server
         * @param file file to upload
         */
        uploadFile: function (params, options) {
            return exports.PetApiFp.uploadFile(params, options)(fetch, basePath);
        },
    };
};
/**
 * StoreApi - fetch parameter creator
 */
exports.StoreApiFetchParamCreator = {
    /**
     * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
     * @summary Delete purchase order by ID
     * @param orderId ID of the order that needs to be deleted
     */
    deleteOrder: function (params, options) {
        // verify required parameter "orderId" is set
        if (params["orderId"] == null) {
            throw new Error("Missing required parameter orderId when calling deleteOrder");
        }
        var baseUrl = "/store/order/{orderId}"
            .replace("{" + "orderId" + "}", "" + params["orderId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Returns a map of status codes to quantities
     * @summary Returns pet inventories by status
     */
    getInventory: function (options) {
        var baseUrl = "/store/inventory";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
     * @summary Find purchase order by ID
     * @param orderId ID of pet that needs to be fetched
     */
    getOrderById: function (params, options) {
        // verify required parameter "orderId" is set
        if (params["orderId"] == null) {
            throw new Error("Missing required parameter orderId when calling getOrderById");
        }
        var baseUrl = "/store/order/{orderId}"
            .replace("{" + "orderId" + "}", "" + params["orderId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Place an order for a pet
     * @param body order placed for purchasing the pet
     */
    placeOrder: function (params, options) {
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling placeOrder");
        }
        var baseUrl = "/store/order";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * StoreApi - functional programming interface
 */
exports.StoreApiFp = {
    /**
     * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
     * @summary Delete purchase order by ID
     * @param orderId ID of the order that needs to be deleted
     */
    deleteOrder: function (params, options) {
        var fetchArgs = exports.StoreApiFetchParamCreator.deleteOrder(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Returns a map of status codes to quantities
     * @summary Returns pet inventories by status
     */
    getInventory: function (options) {
        var fetchArgs = exports.StoreApiFetchParamCreator.getInventory(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
     * @summary Find purchase order by ID
     * @param orderId ID of pet that needs to be fetched
     */
    getOrderById: function (params, options) {
        var fetchArgs = exports.StoreApiFetchParamCreator.getOrderById(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Place an order for a pet
     * @param body order placed for purchasing the pet
     */
    placeOrder: function (params, options) {
        var fetchArgs = exports.StoreApiFetchParamCreator.placeOrder(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * StoreApi - object-oriented interface
 */
var StoreApi = (function (_super) {
    __extends(StoreApi, _super);
    function StoreApi() {
        _super.apply(this, arguments);
    }
    /**
     * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
     * @summary Delete purchase order by ID
     * @param orderId ID of the order that needs to be deleted
     */
    StoreApi.prototype.deleteOrder = function (params, options) {
        return exports.StoreApiFp.deleteOrder(params, options)(this.fetch, this.basePath);
    };
    /**
     * Returns a map of status codes to quantities
     * @summary Returns pet inventories by status
     */
    StoreApi.prototype.getInventory = function (options) {
        return exports.StoreApiFp.getInventory(options)(this.fetch, this.basePath);
    };
    /**
     * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
     * @summary Find purchase order by ID
     * @param orderId ID of pet that needs to be fetched
     */
    StoreApi.prototype.getOrderById = function (params, options) {
        return exports.StoreApiFp.getOrderById(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Place an order for a pet
     * @param body order placed for purchasing the pet
     */
    StoreApi.prototype.placeOrder = function (params, options) {
        return exports.StoreApiFp.placeOrder(params, options)(this.fetch, this.basePath);
    };
    return StoreApi;
}(BaseAPI));
exports.StoreApi = StoreApi;
;
/**
 * StoreApi - factory interface
 */
exports.StoreApiFactory = function (fetch, basePath) {
    return {
        /**
         * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
         * @summary Delete purchase order by ID
         * @param orderId ID of the order that needs to be deleted
         */
        deleteOrder: function (params, options) {
            return exports.StoreApiFp.deleteOrder(params, options)(fetch, basePath);
        },
        /**
         * Returns a map of status codes to quantities
         * @summary Returns pet inventories by status
         */
        getInventory: function (options) {
            return exports.StoreApiFp.getInventory(options)(fetch, basePath);
        },
        /**
         * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
         * @summary Find purchase order by ID
         * @param orderId ID of pet that needs to be fetched
         */
        getOrderById: function (params, options) {
            return exports.StoreApiFp.getOrderById(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Place an order for a pet
         * @param body order placed for purchasing the pet
         */
        placeOrder: function (params, options) {
            return exports.StoreApiFp.placeOrder(params, options)(fetch, basePath);
        },
    };
};
/**
 * UserApi - fetch parameter creator
 */
exports.UserApiFetchParamCreator = {
    /**
     * This can only be done by the logged in user.
     * @summary Create user
     * @param body Created user object
     */
    createUser: function (params, options) {
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling createUser");
        }
        var baseUrl = "/user";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Creates list of users with given input array
     * @param body List of user object
     */
    createUsersWithArrayInput: function (params, options) {
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling createUsersWithArrayInput");
        }
        var baseUrl = "/user/createWithArray";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Creates list of users with given input array
     * @param body List of user object
     */
    createUsersWithListInput: function (params, options) {
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling createUsersWithListInput");
        }
        var baseUrl = "/user/createWithList";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This can only be done by the logged in user.
     * @summary Delete user
     * @param username The name that needs to be deleted
     */
    deleteUser: function (params, options) {
        // verify required parameter "username" is set
        if (params["username"] == null) {
            throw new Error("Missing required parameter username when calling deleteUser");
        }
        var baseUrl = "/user/{username}"
            .replace("{" + "username" + "}", "" + params["username"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Get user by user name
     * @param username The name that needs to be fetched. Use user1 for testing.
     */
    getUserByName: function (params, options) {
        // verify required parameter "username" is set
        if (params["username"] == null) {
            throw new Error("Missing required parameter username when calling getUserByName");
        }
        var baseUrl = "/user/{username}"
            .replace("{" + "username" + "}", "" + params["username"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Logs user into the system
     * @param username The user name for login
     * @param password The password for login in clear text
     */
    loginUser: function (params, options) {
        // verify required parameter "username" is set
        if (params["username"] == null) {
            throw new Error("Missing required parameter username when calling loginUser");
        }
        // verify required parameter "password" is set
        if (params["password"] == null) {
            throw new Error("Missing required parameter password when calling loginUser");
        }
        var baseUrl = "/user/login";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "username": params["username"],
            "password": params["password"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Logs out current logged in user session
     */
    logoutUser: function (options) {
        var baseUrl = "/user/logout";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This can only be done by the logged in user.
     * @summary Updated user
     * @param username name that need to be updated
     * @param body Updated user object
     */
    updateUser: function (params, options) {
        // verify required parameter "username" is set
        if (params["username"] == null) {
            throw new Error("Missing required parameter username when calling updateUser");
        }
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling updateUser");
        }
        var baseUrl = "/user/{username}"
            .replace("{" + "username" + "}", "" + params["username"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * UserApi - functional programming interface
 */
exports.UserApiFp = {
    /**
     * This can only be done by the logged in user.
     * @summary Create user
     * @param body Created user object
     */
    createUser: function (params, options) {
        var fetchArgs = exports.UserApiFetchParamCreator.createUser(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Creates list of users with given input array
     * @param body List of user object
     */
    createUsersWithArrayInput: function (params, options) {
        var fetchArgs = exports.UserApiFetchParamCreator.createUsersWithArrayInput(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Creates list of users with given input array
     * @param body List of user object
     */
    createUsersWithListInput: function (params, options) {
        var fetchArgs = exports.UserApiFetchParamCreator.createUsersWithListInput(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This can only be done by the logged in user.
     * @summary Delete user
     * @param username The name that needs to be deleted
     */
    deleteUser: function (params, options) {
        var fetchArgs = exports.UserApiFetchParamCreator.deleteUser(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Get user by user name
     * @param username The name that needs to be fetched. Use user1 for testing.
     */
    getUserByName: function (params, options) {
        var fetchArgs = exports.UserApiFetchParamCreator.getUserByName(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Logs user into the system
     * @param username The user name for login
     * @param password The password for login in clear text
     */
    loginUser: function (params, options) {
        var fetchArgs = exports.UserApiFetchParamCreator.loginUser(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Logs out current logged in user session
     */
    logoutUser: function (options) {
        var fetchArgs = exports.UserApiFetchParamCreator.logoutUser(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This can only be done by the logged in user.
     * @summary Updated user
     * @param username name that need to be updated
     * @param body Updated user object
     */
    updateUser: function (params, options) {
        var fetchArgs = exports.UserApiFetchParamCreator.updateUser(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * UserApi - object-oriented interface
 */
var UserApi = (function (_super) {
    __extends(UserApi, _super);
    function UserApi() {
        _super.apply(this, arguments);
    }
    /**
     * This can only be done by the logged in user.
     * @summary Create user
     * @param body Created user object
     */
    UserApi.prototype.createUser = function (params, options) {
        return exports.UserApiFp.createUser(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Creates list of users with given input array
     * @param body List of user object
     */
    UserApi.prototype.createUsersWithArrayInput = function (params, options) {
        return exports.UserApiFp.createUsersWithArrayInput(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Creates list of users with given input array
     * @param body List of user object
     */
    UserApi.prototype.createUsersWithListInput = function (params, options) {
        return exports.UserApiFp.createUsersWithListInput(params, options)(this.fetch, this.basePath);
    };
    /**
     * This can only be done by the logged in user.
     * @summary Delete user
     * @param username The name that needs to be deleted
     */
    UserApi.prototype.deleteUser = function (params, options) {
        return exports.UserApiFp.deleteUser(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get user by user name
     * @param username The name that needs to be fetched. Use user1 for testing.
     */
    UserApi.prototype.getUserByName = function (params, options) {
        return exports.UserApiFp.getUserByName(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Logs user into the system
     * @param username The user name for login
     * @param password The password for login in clear text
     */
    UserApi.prototype.loginUser = function (params, options) {
        return exports.UserApiFp.loginUser(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Logs out current logged in user session
     */
    UserApi.prototype.logoutUser = function (options) {
        return exports.UserApiFp.logoutUser(options)(this.fetch, this.basePath);
    };
    /**
     * This can only be done by the logged in user.
     * @summary Updated user
     * @param username name that need to be updated
     * @param body Updated user object
     */
    UserApi.prototype.updateUser = function (params, options) {
        return exports.UserApiFp.updateUser(params, options)(this.fetch, this.basePath);
    };
    return UserApi;
}(BaseAPI));
exports.UserApi = UserApi;
;
/**
 * UserApi - factory interface
 */
exports.UserApiFactory = function (fetch, basePath) {
    return {
        /**
         * This can only be done by the logged in user.
         * @summary Create user
         * @param body Created user object
         */
        createUser: function (params, options) {
            return exports.UserApiFp.createUser(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Creates list of users with given input array
         * @param body List of user object
         */
        createUsersWithArrayInput: function (params, options) {
            return exports.UserApiFp.createUsersWithArrayInput(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Creates list of users with given input array
         * @param body List of user object
         */
        createUsersWithListInput: function (params, options) {
            return exports.UserApiFp.createUsersWithListInput(params, options)(fetch, basePath);
        },
        /**
         * This can only be done by the logged in user.
         * @summary Delete user
         * @param username The name that needs to be deleted
         */
        deleteUser: function (params, options) {
            return exports.UserApiFp.deleteUser(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get user by user name
         * @param username The name that needs to be fetched. Use user1 for testing.
         */
        getUserByName: function (params, options) {
            return exports.UserApiFp.getUserByName(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Logs user into the system
         * @param username The user name for login
         * @param password The password for login in clear text
         */
        loginUser: function (params, options) {
            return exports.UserApiFp.loginUser(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Logs out current logged in user session
         */
        logoutUser: function (options) {
            return exports.UserApiFp.logoutUser(options)(fetch, basePath);
        },
        /**
         * This can only be done by the logged in user.
         * @summary Updated user
         * @param username name that need to be updated
         * @param body Updated user object
         */
        updateUser: function (params, options) {
            return exports.UserApiFp.updateUser(params, options)(fetch, basePath);
        },
    };
};
